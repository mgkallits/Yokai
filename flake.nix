{
  description = "NixOS Flake";

  inputs = {
    nixpkgs = {
      url = "github:nixos/nixpkgs?ref=nixos-unstable";
    };
    nixpkgs-stable = {
      url = "github:nixos/nixpkgs?ref=nixos-24.11";
    };
    nypkgs = {
      url = "github:yunfachi/nypkgs";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-hardware = {
      url = "github:NixOS/nixos-hardware/master";
      # inputs.nixpkgs.follows = "nixpkgs";
    };
    lanzaboote = {
      url = "github:nix-community/lanzaboote/v0.4.2";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    hyprland = {
      url = "github:hyprwm/Hyprland";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    hyprswitch = {
      url = "github:h3rmt/hyprswitch/v3.3.2"; # pinned version, changed from "release"
      inputs.nixpkgs.follows = "nixpkgs";
    };
    swww = {
      url = "github:LGFae/swww";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    alejandra = {
      url = "github:kamadorueda/alejandra/3.1.0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    stylix = {
      url = "github:danth/stylix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    emacs-overlay = {
      url = "github:nix-community/emacs-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    doom-emacs = {
      url = "github:hlissner/doom-emacs";
      flake = false;
    };
    nvf.url = "github:notashelf/nvf";

  };

  outputs =
    inputs@{
      self,
      nixpkgs,
      nixpkgs-stable,
      nypkgs,
      nixos-hardware,
      ...
    }:
    let
      inherit (import ./settings.nix) hostname system username;
      ylib = nypkgs.lib."${system}";
      stpkgs = import nixpkgs-stable {
        inherit system;
        config.allowUnfree = true;
      };
    in
    {
      nixosConfigurations."${hostname}" = nixpkgs.lib.nixosSystem rec {
        inherit system;
        specialArgs = import ./settings.nix // {
          inherit (nixpkgs) lib;
          inherit inputs ylib stpkgs;
        };
        modules =
          ylib.umport {
            path = ./modules;
            include = [
              (./modules/system/hardware/autogenerated + "/@${hostname}.nix")
              (./modules/user + "/${username}@${hostname}.nix")
            ];
            exclude = [
              ./modules/system/boot/secure-boot/nix # TODO: is this needed ?
              ./modules/system/hardware/autogenerated
              ./modules/user
            ];
          }
          ++ [
            {
              # TODO: -tanuki- is this needed ?
              # Add your model from this list: https://github.com/NixOS/nixos-hardware/blob/master/flake.nix:
              # imports = nixpkgs.lib.optionals (hostname == "tanuki") [
              #   nixos-hardware.nixosModules.lenovo-thinkpad-t495
              # ];

              nixpkgs.config = {
                allowUnfree = true; # Allow the installation of unfree (proprietary) packages across the system.
                # config.allowUnfreePredicate = (_: true); # A predicate function that always returns `true`,
                # allowing all unfree packages in this case.
                # Example where this is not a global permission:
                # config.allowUnfreePredicate = pkg: pkg.name == "steam";  # Only allow the "steam" package.
                # enableParallelBuildingByDefault = true;
              };
              home-manager = {
                # useGlobalPkgs = true;
                useUserPackages = true;
                backupFileExtension = "bak";
                extraSpecialArgs = import ./settings.nix // {
                  inherit inputs ylib;
                };
              };
            }
          ];
      };
      # Nix Formater - Flake specific option (Source: https://nix.dev/manual/nix/2.26/command-ref/new-cli/nix3-fmt)
      # The command `nix fmt` calls the formatter specified in the flake.
      # Flags can be forwarded to the formatter by using -- followed by the flags.
      # Any arguments will be forwarded to the formatter. Typically these are the files to format.
      # As of which formatter, I prefere the official formatter for nix code (nixfmt):
      formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.nixfmt-rfc-style;

    };
}
