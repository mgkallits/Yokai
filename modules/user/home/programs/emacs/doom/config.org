#+title: My Doom Emacs configuration
#+date: {{{modification-time(%Y-%m-%d)}}}

#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "George Kallitsounakis"
      user-mail-address "mgkallits@gmail.com"
      default-input-method 'greek
      ;; +doom-dashboard-banner-dir doom-user-dir
      ;; +doom-dashboard-banner-file "wings3.png"
      ;; +doom-dashboard-banner-padding '(0 . 2)
      )

;; Turn on abbrev mode
;; (setq-default abbrev-mode t)

;; Start Doom fullscreen
;; (add-to-list 'default-frame-alist '(width . 92))
;; (add-to-list 'default-frame-alist '(height . 40))
;; (add-to-list 'default-frame-alist '(alpha 97 100))

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:

;; other font was ComicShannsMono
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 18) ;; :weight was 'semi-light
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 20)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 27)
      ;; For the symbol-font don't use the 08 version because it doesn't have `bold-italic' face!!
      ;; Also read this: https://github.com/doomemacs/doomemacs/blob/master/modules/ui/unicode/README.org
      doom-symbol-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 18)
      ;; doom-serif-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 18)
      )

;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'ewal-doom-one)


(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))


;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'ewal-doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
;; (remove-hook! '(text-mode-hook) #'display-line-numbers-mode)


;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!

(setq org-directory "~/Desktop/Org/")

;; (if (and (string-match-p "Windows" (getenv "PATH")) (not IS-WINDOWS))
;;     (setq dropbox-directory "/mnt/c/Users/X380/Dropbox/")
;;     (setq dropbox-directory "~/Dropbox/"))

;; (setq org-directory (concat dropbox-directory "Notes/"))


(use-package! nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

;; (use-package! magit-file-icons
;;   :init
;;   (magit-file-icons-mode 1))

;; (setq frame-title-format
;;       '(""
;;         (:eval
;;          (if (s-contains-p org-roam-directory (or buffer-file-name ""))
;;              (replace-regexp-in-string
;;               ".*/[0-9]*-?" "☰ "
;;               (subst-char-in-string ?_ ?  buffer-file-name))
;;            "%b"))
;;         (:eval
;;          (let ((project-name (projectile-project-name)))
;;            (unless (string= "-" project-name)
;;              (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; (add-hook! org-mode :append
;;            #'visual-line-mode
;;            #'variable-pitch-mode)

;; Enable /*Bold-Iralic*/ font rendering ??
;; The Following was generated by the deepseek AI -- See full responce here on
;; the following path: ~/.dotfiles/Responses/deepseek/doom/font-bold-italic.md
(defface my/bold-italic-face
  '((t :inherit (bold italic)))
  "Face for text that is both bold and italic."
  :group 'my-faces)


(add-hook 'org-mode-hook
          (lambda ()
            (font-lock-add-keywords
             nil
             '(("\\/\\*\\([^*]+\\)\\*\\/" 1 'my/bold-italic-face prepend)))))


(setq projectile-project-search-path '("~/.dotfiles"))


#+end_src

#+RESULTS:
| ~/.dotfiles |


# Precision scrolling

Turn on pixel scrolling:

#+begin_src emacs-lisp
(pixel-scroll-precision-mode t)
#+end_src

#+RESULTS:
: t


The following code replace all scrolling and recenter commands with the precision-scrolling version.

#+begin_src  emacs-lisp
(defun hp/pixel-recenter (&optional arg redisplay)
  "Similar to `recenter' but with pixel scrolling.
ARG and REDISPLAY are identical to the original function."
  ;; See the links in line 6676 in window.c for
  (when-let* ((current-pixel (pixel-posn-y-at-point))
              (target-pixel (if (numberp arg)
                                (* (line-pixel-height) arg)
                              (* 0.5 (window-body-height nil t))))
              (distance-in-pixels 0)
              (pixel-scroll-precision-interpolation-total-time
               (/ pixel-scroll-precision-interpolation-total-time 2.0)))
    (setq target-pixel
          (if (<= 0 target-pixel)
              target-pixel
            (- (window-body-height nil t) (abs target-pixel))))
    (setq distance-in-pixels (- target-pixel current-pixel))
    (condition-case err
        (pixel-scroll-precision-interpolate distance-in-pixels nil 1)
      (error (message "[hp/pixel-recenter] %s" (error-message-string err))))
    (when redisplay (redisplay t))))

(defun hp/pixel-scroll-up (&optional arg)
  "(Nearly) drop-in replacement for `scroll-up'."
  (cond
   ((eq this-command 'scroll-up-line)
    (funcall (ad-get-orig-definition 'scroll-up) (or arg 1)))
   (t
    (unless (eobp) ; Jittery window if trying to go down when already at bottom
      (pixel-scroll-precision-interpolate
       (- (* (line-pixel-height)
             (or arg (- (window-text-height) next-screen-context-lines))))
       nil 1)))))

(defun hp/pixel-scroll-down (&optional arg)
  "(Nearly) drop-in replacement for `scroll-down'."
  (cond
   ((eq this-command 'scroll-down-line)
    (funcall (ad-get-orig-definition 'scroll-down) (or arg 1)))
   (t
    (pixel-scroll-precision-interpolate
     (* (line-pixel-height)
        (or arg (- (window-text-height) next-screen-context-lines)))
     nil 1))))

(add-hook 'pixel-scroll-precision-mode-hook
          (lambda ()
            (cond
             (pixel-scroll-precision-mode
              (advice-add 'scroll-up :override 'hp/pixel-scroll-up)
              (advice-add 'scroll-down :override 'hp/pixel-scroll-down)
              (advice-add 'recenter :override 'hp/pixel-recenter))
             (t
              (advice-remove 'scroll-up 'hp/pixel-scroll-up)
              (advice-remove 'scroll-down 'hp/pixel-scroll-down)
              (advice-remove 'recenter 'hp/pixel-recenter)))))
#+end_src

# Fixing the nix syntax highlighting

#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")
#+end_src



# Set the opacity of frames
#+begin_src emacs-lisp
;; Background-only transparency (Emacs 29+)
(set-frame-parameter nil 'alpha-background 85)
(add-to-list 'default-frame-alist '(alpha-background . 85))
#+end_src

#+begin_src emacs-lisp
;; Frame opacity settings
;; (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
;; (add-to-list 'default-frame-alist '(alpha . (95 . 95)))

;; Optional: Toggle transparency function
;; (defun toggle-transparency ()
;;   "Toggle between transparent and opaque states."
;;   (interactive)
;;   (let ((alpha (frame-parameter nil 'alpha)))
;;     (set-frame-parameter
;;      nil 'alpha
;;      (if (eql (cond ((numberp alpha) alpha)
;;                     ((numberp (cdr alpha)) (cdr alpha))
;;                     (t 100))
;;               100)
;;          '(90 . 90) '(100 . 100)))))
#+end_src
